@model WebApplication2.Models.MovieViewModel
@{
    ViewBag.Title = "ViewMovie";
}


<h2>@Model.movie.Id</h2>

<div id="res">
    <div class='row'>
        <div class='poster, column'>
            <img class='right_shadow' src='http://image.tmdb.org/t/p/w92/@Model.movie.PosterPath' width='92' height='138' />
        </div>
        <div class='info, column'>
            <h3><a href='/Home/ViewMovie?idmovie=@Model.movie.Id' title=@Model.movie.Title>  @Model.movie.Title</a> </h3>
            <p><a>Popularity: @String.Format("{0:0.00}", @Model.movie.Popularity)</a> </p>
            <p><a>Score: @Model.movie.VoteAverage </a></p>
            <p><a>Total votes: @Model.movie.VoteCount </a></p>

        </div>
    </div>
    <div id="credits" class='people, column, column-text'>
        <h3><a title=@Model.movie.Title> Credits</a> </h3>
        <p>
            <a><h2>Cast:</h2> </a> @foreach (var item in Model.movie.Credits.Cast)
            {<a class="item"> @item.Name </a>}
        </p>
        <p>
            <a><h2>Crew:</h2> </a> @foreach (var item in Model.movie.Credits.Crew)
            {<a class="item"> @item.Name </a>}
        </p>
        <p><a>Total votes: @Model.movie.VoteCount </a></p>
    </div>
    <div id="graph">

    </div>
</div>
<style>
    
</style>
<script type="text/javascript">
    $(document).ready(function () {
        
        var links = @Html.Raw(Json.Encode(Model.links));
        console.log(links);
        var nodes = {};

        // Compute the distinct nodes from the links.
        links.forEach(function (link) {
            link.source = nodes[link.source] || (nodes[link.source] = { name: link.source });
            link.target = nodes[link.target] || (nodes[link.target] = { name: link.target });
        });

        var width = 1200,
            height = 800;

        var force = d3.layout.force()
            .nodes(d3.values(nodes))
            .links(links)
            .size([width, height])
            .linkDistance(80)
            .charge(-300)
            .on("tick", tick)
            .start();

        var svg = d3.select("#graph").append("svg")
            .attr("width", width)
            .attr("height", height);

        // Per-type markers, as they don't inherit styles.
        svg.append("defs").selectAll("marker")
            .data(["suit", "licensing", "resolved"])
          .enter().append("marker")
            .attr("id", function (d) { return d; })
            .attr("viewBox", "0 -5 10 10")
            .attr("refX", 15)
            .attr("refY", -1.5)
            .attr("markerWidth", 6)
            .attr("markerHeight", 6)
            .attr("orient", "auto")
          .append("path")
            .attr("d", "M0,-5L10,0L0,5");

        var path = svg.append("g").selectAll("path")
            .data(force.links())
          .enter().append("path")
          .attr("class", function (d) { return "link "; });

        var circle = svg.append("g").selectAll("circle")
            .data(force.nodes())
          .enter().append("circle")
            .attr("r", 6)
            .call(force.drag);

        var text = svg.append("g").selectAll("text")
            .data(force.nodes())
          .enter().append("text")
            .attr("x", 8)
            .attr("y", ".31em")
            .text(function (d) { return d.name; });

        // Use elliptical arc path segments to doubly-encode directionality.
        function tick() {
            path.attr("d", linkArc);
            circle.attr("transform", transform);
            text.attr("transform", transform);
        }

        function linkArc(d) {
            var dx = d.target.x - d.source.x,
                dy = d.target.y - d.source.y,
                dr = Math.sqrt(dx * dx + dy * dy);
            return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
        }

        function transform(d) {
            return "translate(" + d.x + "," + d.y + ")";
        }

    });
</script>

